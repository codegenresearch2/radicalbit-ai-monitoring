from radicalbit_platform_sdk.apis import ModelReferenceDataset\\\nfrom radicalbit_platform_sdk.models import ReferenceFileUpload, ModelType, JobStatus, ClientError\\\\nimport responses\\\\nimport unittest\\\\nimport uuid\\\\\n\\\\nclass ModelReferenceDatasetTest(unittest.TestCase):\\\\n    @responses.activate\\\\n    def test_statistics_ok(self):\\\\n        base_url = "http://api:9000"\\\\n        model_id = uuid.uuid4()\\\\n        import_uuid = uuid.uuid4()\\\\n        n_variables = 10\\\\n        n_observations = 1000\\\\n        missing_cells = 10\\\\n        missing_cells_perc = 1\\\\n        duplicate_rows = 10\\\\n        duplicate_rows_perc = 1\\\\n        numeric = 3\\\\n        categorical = 6\\\\n        datetime = 1\\\\n        model_reference_dataset = ModelReferenceDataset(\\\\n            base_url,\\\\n            model_id,\\\\n            ModelType.BINARY,\\\\n            ReferenceFileUpload(\\\\n                uuid=import_uuid,\\\\n                path='s3://bucket/file.csv',\\\\n                date='2014',\\\\n                status=JobStatus.IMPORTING,\\\\n            ),\\\\n        )\\\\n\\\\n        responses.add(\\\\n            method=responses.GET,\\\\n            url=f'{base_url}/api/models/{str(model_id)}/reference/statistics', status=200,\\\\n            body={\"datetime\": 'something_not_used',\"jobStatus\": 'SUCCEEDED',\"statistics\": {\"nVariables\": n_variables,\"nObservations\": n_observations,\"missingCells\": missing_cells,\"missingCellsPerc\": missing_cells_perc,\"duplicateRows\": duplicate_rows,\"duplicateRowsPerc\": duplicate_rows_perc,\"numeric\": numeric,\"categorical\": categorical,\"datetime\": datetime}\\\\n        },\\\\n        )\\\\\\\n\\\\n        stats = model_reference_dataset.statistics()\\\\n\\\\n        self.assertEqual(stats.n_variables, n_variables)\\\\n        self.assertEqual(stats.n_observations, n_observations)\\\\n        self.assertEqual(stats.missing_cells, missing_cells)\\\\n        self.assertEqual(stats.missing_cells_perc, missing_cells_perc)\\\\n        self.assertEqual(stats.duplicate_rows, duplicate_rows)\\\\n        self.assertEqual(stats.duplicate_rows_perc, duplicate_rows_perc)\\\\n        self.assertEqual(stats.numeric, numeric)\\\\n        self.assertEqual(stats.categorical, categorical)\\\\n        self.assertEqual(stats.datetime, datetime)\\\\n        self.assertEqual(model_reference_dataset.status(), JobStatus.SUCCEEDED)\\\\n\\\\n    @responses.activate\\\\n    def test_statistics_validation_error(self):\\\\n        base_url = "http://api:9000"\\\\n        model_id = uuid.uuid4()\\\\n        import_uuid = uuid.uuid4()\\\\n        model_reference_dataset = ModelReferenceDataset(\\\\n            base_url,\\\\n            model_id,\\\\n            ModelType.BINARY,\\\\n            ReferenceFileUpload(\\\\n                uuid=import_uuid,\\\\n                path='s3://bucket/file.csv',\\\\n                date='2014',\\\\n                status=JobStatus.IMPORTING,\\\\n            ),\\\\n        )\\\\n\\\\n        responses.add(\\\\n            method=responses.GET,\\\\n            url=f'{base_url}/api/models/{str(model_id)}/reference/statistics', status=200,\\\\n            body={"statistics": "wrong"},\\\\n        )\\\\n\\\\n        with self.assertRaises(ClientError):\\\\n            model_reference_dataset.statistics()\\\\n\\\\n    @responses.activate\\\\n    def test_statistics_key_error(self):\\\\n        base_url = "http://api:9000"\\\\n        model_id = uuid.uuid4()\\\\n        import_uuid = uuid.uuid4()\\\\n        model_reference_dataset = ModelReferenceDataset(\\\\n            base_url,\\\\n            model_id,\\\\n            ModelType.BINARY,\\\\n            ReferenceFileUpload(\\\\n                uuid=import_uuid,\\\\n                path='s3://bucket/file.csv',\\\\n                date='2014',\\\\n                status=JobStatus.IMPORTING,\\\\n            ),\\\\n        )\\\\n\\\\n        responses.add(\\\\n            method=responses.GET,\\\\n            url=f'{base_url}/api/models/{str(model_id)}/reference/statistics', status=200,\\\\n            body={"wrong": "json"},\\\\n        )\\\\n\\\\n        with self.assertRaises(ClientError):\\\\n            model_reference_dataset.statistics()\\\\n\\\\n    # Add more test methods for other functionalities as needed\\\\n}
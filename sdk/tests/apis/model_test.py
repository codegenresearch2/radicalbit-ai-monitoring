import time\\\nimport uuid\\\\\nimport boto3\\\\\nfrom moto import mock_aws\\\\\nimport pytest\\\\\nimport responses\\\\n\\\nfrom radicalbit_platform_sdk.apis import Model\\\\\nfrom radicalbit_platform_sdk.errors import ClientError\\\\\nfrom radicalbit_platform_sdk.models import (\\\\\n    ColumnDefinition, \\\\\n    CurrentFileUpload, \\\\\n    DataType, \\\\\n    FieldType, \\\\\n    Granularity, \\\\\n    JobStatus, \\\\\n    ModelDefinition, \\\\\n    ModelType, \\\\\n    OutputType, \\\\\n    ReferenceFileUpload, \\\\\n    SupportedTypes \\\\\n)\\\n\\\nclass ModelTest(unittest.TestCase): \\\\\n    @responses.activate \\\\\n    def test_delete_model(self): \\\\\n        base_url = 'http://api:9000' \\\\\n        model_id = uuid.uuid4() \\\\\n        column_def = ColumnDefinition( \\\\\n            name='column', type=SupportedTypes.string, field_type=FieldType.categorical \\\\\n        ) \\\\\n        outputs = OutputType(prediction=column_def, output=[column_def]) \\\\\n        model = Model( \\\\\n            base_url, \\\\\n            ModelDefinition( \\\\\n                uuid=model_id, \\\\\n                name='My Model', \\\\\n                model_type=ModelType.BINARY, \\\\\n                data_type=DataType.TABULAR, \\\\\n                granularity=Granularity.MONTH, \\\\\n                features=[], \\\\\n                outputs=outputs, \\\\\n                target=column_def, \\\\\n                timestamp=column_def, \\\\\n                created_at=str(time.time()), \\\\\n                updated_at=str(time.time()), \\\\\n            ), \\\\\n        ) \\\\\n        responses.add( \\\\\n            method=responses.DELETE, \\\\\n            url=f'{base_url}/api/models/{str(model_id)}', \\\\\n            status=200, \\\\\n        ) \\\\\n        model.delete() \\\\\n\\\n    @mock_aws \\\\\n    @responses.activate \\\\\n    def test_load_reference_dataset_without_object_name(self): \\\\\n        base_url = 'http://api:9000' \\\\\n        model_id = uuid.uuid4() \\\\\n        bucket_name = 'test-bucket' \\\\\n        file_name = 'test.txt' \\\\\n        column_def = ColumnDefinition( \\\\\n            name='prediction', type=SupportedTypes.float, field_type=FieldType.numerical \\\\\n        ) \\\\\n        expected_path = f's3://{bucket_name}/{model_id}/reference/{file_name}' \\\\\n        conn = boto3.resource('s3', region_name='us-east-1') \\\\\n        conn.create_bucket(Bucket=bucket_name) \\\\\n        model = Model( \\\\\n            base_url, \\\\\n            ModelDefinition( \\\\\n                uuid=model_id, \\\\\n                name='My Model', \\\\\n                model_type=ModelType.BINARY, \\\\\n                data_type=DataType.TABULAR, \\\\\n                granularity=Granularity.HOUR, \\\\\n                features=[ \\\\\n                    ColumnDefinition( \\\\\n                        name='first_name', \\\\\n                        type=SupportedTypes.string, \\\\\n                        field_type=FieldType.categorical, \\\\\n                    ), \\\\\n                    ColumnDefinition( \\\\\n                        name='age', \\\\\n                        type=SupportedTypes.int, \\\\\n                        field_type=FieldType.numerical, \\\\\n                    ), \\\\\n                ], \\\\\n                outputs=OutputType(prediction=column_def, output=[column_def]), \\\\\n                target=ColumnDefinition( \\\\\n                    name='adult', \\\\\n                    type=SupportedTypes.bool, \\\\\n                    field_type=FieldType.categorical, \\\\\n                ), \\\\\n                timestamp=ColumnDefinition( \\\\\n                    name='created_at', \\\\\n                    type=SupportedTypes.datetime, \\\\\n                    field_type=FieldType.datetime, \\\\\n                ), \\\\\n                created_at=str(time.time()), \\\\\n                updated_at=str(time.time()), \\\\\n            ), \\\\\n        ) \\\\\n        response = ReferenceFileUpload( \\\\\n            uuid=uuid.uuid4(), \\\\\n            path=expected_path, \\\\\n            date='', \\\\\n            status=JobStatus.IMPORTING \\\\\n        ) \\\\\n        responses.add( \\\\\n            method=responses.POST, \\\\\n            url=f'{base_url}/api/models/{str(model_id)}/reference/bind', \\\\\n            body=response.model_dump_json(), \\\\\n            status=200, \\\\\n            content_type='application/json', \\\\\n        ) \\\\\n        response = model.load_reference_dataset( \\\\\n            'tests_resources/people.csv', bucket_name \\\\\n        ) \\\\\n        assert response.path() == expected_path \\\\\n\\\n    @mock_aws \\\\\n    @responses.activate \\\\\n    def test_load_current_dataset(self): \\\\\n        base_url = 'http://api:9000' \\\\\n        model_id = uuid.uuid4() \\\\\n        bucket_name = 'test-bucket' \\\\\n        file_name = 'test.txt' \\\\\n        column_def = ColumnDefinition( \\\\\n            name='prediction', type=SupportedTypes.float, field_type=FieldType.numerical \\\\\n        ) \\\\\n        expected_path = f's3://{bucket_name}/{model_id}/current/{file_name}' \\\\\n        conn = boto3.resource('s3', region_name='us-east-1') \\\\\n        conn.create_bucket(Bucket=bucket_name) \\\\\n        model = Model( \\\\\n            base_url, \\\\\n            ModelDefinition( \\\\\n                uuid=model_id, \\\\\n                name='My Model', \\\\\n                model_type=ModelType.BINARY, \\\\\n                data_type=DataType.TABULAR, \\\\\n                granularity=Granularity.DAY, \\\\\n                features=[ \\\\\n                    ColumnDefinition( \\\\\n                        name='first_name', \\\\\n                        type=SupportedTypes.string, \\\\\n                        field_type=FieldType.categorical, \\\\\n                    ), \\\\\n                    ColumnDefinition( \\\\\n                        name='age', \\\\\n                        type=SupportedTypes.int, \\\\\n                        field_type=FieldType.numerical, \\\\\n                    ), \\\\\n                ], \\\\\n                outputs=OutputType(prediction=column_def, output=[column_def]), \\\\\n                target=ColumnDefinition( \\\\\n                    name='adult', \\\\\n                    type=SupportedTypes.bool, \\\\\n                    field_type=FieldType.categorical, \\\\\n                ), \\\\\n                timestamp=ColumnDefinition( \\\\\n                    name='created_at', \\\\\n                    type=SupportedTypes.datetime, \\\\\n                    field_type=FieldType.datetime, \\\\\n                ), \\\\\n                created_at=str(time.time()), \\\\\n                updated_at=str(time.time()), \\\\\n            ), \\\\\n        ) \\\\\n        response = CurrentFileUpload( \\\\\n            uuid=uuid.uuid4(), \\\\\n            path=expected_path, \\\\\n            date='', \\\\\n            status=JobStatus.IMPORTING, \\\\\n            correlation_id_column='correlation' \\\\\n        ) \\\\\n        responses.add( \\\\\n            method=responses.POST, \\\\\n            url=f'{base_url}/api/models/{str(model_id)}/current/bind', \\\\\n            body=response.model_dump_json(), \\\\\n            status=200, \\\\\n            content_type='application/json', \\\\\n        ) \\\\\n        response = model.load_current_dataset( \\\\\n            'tests_resources/people_current.csv', \\\\\n            bucket_name, \\\\\n            'correlation' \\\\\n        ) \\\\\n        assert response.path() == expected_path \\\\\n\\\n    @mock_aws \\\\\n    @responses.activate \\\\\n    def test_load_reference_dataset_with_different_separator(self): \\\\\n        base_url = 'http://api:9000' \\\\\n        model_id = uuid.uuid4() \\\\\n        bucket_name = 'test-bucket' \\\\\n        file_name = 'test.txt' \\\\\n        column_def = ColumnDefinition( \\\\\n            name='prediction', type=SupportedTypes.float, field_type=FieldType.numerical \\\\\n        ) \\\\\n        expected_path = f's3://{bucket_name}/{model_id}/reference/{file_name}' \\\\\n        conn = boto3.resource('s3', region_name='us-east-1') \\\\\n        conn.create_bucket(Bucket=bucket_name) \\\\\n        model = Model( \\\\\n            base_url, \\\\\n            ModelDefinition( \\\\\n                uuid=model_id, \\\\\n                name='My Model', \\\\\n                model_type=ModelType.BINARY, \\\\\n                data_type=DataType.TABULAR, \\\\\n                granularity=Granularity.DAY, \\\\\n                features=[ \\\\\n                    ColumnDefinition( \\\\\n                        name='first_name', \\\\\n                        type=SupportedTypes.string, \\\\\n                        field_type=FieldType.categorical, \\\\\n                    ), \\\\\n                    ColumnDefinition( \\\\\n                        name='age', \\\\\n                        type=SupportedTypes.int, \\\\\n                        field_type=FieldType.numerical, \\\\\n                    ), \\\\\n                ], \\\\\n                outputs=OutputType(prediction=column_def, output=[column_def]), \\\\\n                target=ColumnDefinition( \\\\\n                    name='adult', \\\\\n                    type=SupportedTypes.bool, \\\\\n                    field_type=FieldType.categorical, \\\\\n                ), \\\\\n                timestamp=ColumnDefinition( \\\\\n                    name='created_at', \\\\\n                    type=SupportedTypes.datetime, \\\\\n                    field_type=FieldType.datetime, \\\\\n                ), \\\\\n                created_at=str(time.time()), \\\\\n                updated_at=str(time.time()), \\\\\n            ), \\\\\n        ) \\\\\n        response = ReferenceFileUpload( \\\\\n            uuid=uuid.uuid4(), \\\\\n            path=expected_path, \\\\\n            date='', \\\\\n            status=JobStatus.IMPORTING \\\\\n        ) \\\\\n        responses.add( \\\\\n            method=responses.POST, \\\\\n            url=f'{base_url}/api/models/{str(model_id)}/reference/bind', \\\\\n            body=response.model_dump_json(), \\\\\n            status=200, \\\\\n            content_type='application/json', \\\\\n        ) \\\\\n        response = model.load_reference_dataset( \\\\\n            'tests_resources/people_pipe_separated.csv', bucket_name, separator='|' \\\\\n        ) \\\\\n        assert response.path() == expected_path \\\\\n\\\n    def test_load_reference_dataset_wrong_headers(self): \\\\\n        column_def = ColumnDefinition( \\\\\n            name='prediction', type=SupportedTypes.float, field_type=FieldType.numerical \\\\\n        ) \\\\\n        model = Model( \\\\\n            'http://api:9000', \\\\\n            ModelDefinition( \\\\\n                uuid=uuid.uuid4(), \\\\\n                name='My Model', \\\\\n                model_type=ModelType.BINARY, \\\\\n                data_type=DataType.TABULAR, \\\\\n                granularity=Granularity.MONTH, \\\\\n                features=[ \\\\\n                    ColumnDefinition( \\\\\n                        name='first_name', \\\\\n                        type=SupportedTypes.string, \\\\\n                        field_type=FieldType.categorical, \\\\\n                    ), \\\\\n                    ColumnDefinition( \\\\\n                        name='age', \\\\\n                        type=SupportedTypes.int, \\\\\n                        field_type=FieldType.numerical, \\\\\n                    ), \\\\\n                ], \\\\\n                outputs=OutputType(prediction=column_def, output=[column_def]), \\\\\n                target=ColumnDefinition( \\\\\n                    name='adult', \\\\\n                    type=SupportedTypes.bool, \\\\\n                    field_type=FieldType.categorical, \\\\\n                ), \\\\\n                timestamp=ColumnDefinition( \\\\\n                    name='created_at', \\\\\n                    type=SupportedTypes.datetime, \\\\\n                    field_type=FieldType.datetime, \\\\\n                ), \\\\\n                created_at=str(time.time()), \\\\\n                updated_at=str(time.time()), \\\\\n            ), \\\\\n        ) \\\\\n        with pytest.raises(ClientError): \\\\\n            model.load_reference_dataset('tests_resources/wrong.csv', 'bucket_name') \\\\\n
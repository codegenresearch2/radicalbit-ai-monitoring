from radicalbit_platform_sdk.commons import invoke\\nfrom radicalbit_platform_sdk.models import (\\n    JobStatus, \\n    ReferenceFileUpload, \\n    DatasetStats, \\n    ModelQuality, \\n    DataQuality, \\n    ModelType, \\n    BinaryClassificationModelQuality, \\n    BinaryClassificationDataQuality \\n)\\nfrom radicalbit_platform_sdk.errors import ClientError \\nfrom pydantic import ValidationError \\nfrom typing import Optional \\nimport requests \\nfrom uuid import UUID \\n\\nclass ModelReferenceDataset: \\n    def __init__(self, \\n        base_url: str, \\n        model_uuid: UUID, \\n        model_type: ModelType, \\n        upload: ReferenceFileUpload \\n    ) -> None: \\n        self.__base_url = base_url \\n        self.__model_uuid = model_uuid \\n        self.__model_type = model_type \\n        self.__uuid = upload.uuid \\n        self.__path = upload.path \\n        self.__date = upload.date \\n        self.__status = upload.status \\n        self.__statistics = None \\n        self.__model_metrics = None \\n        self.__data_metrics = None \\n\\n    def uuid(self) -> UUID: \\n        return self.__uuid \\n\\n    def path(self) -> str: \\n        return self.__path \\n\\n    def date(self) -> str: \\n        return self.__date \\n\\n    def status(self) -> str: \\n        return self.__status \\n\\n    def statistics(self) -> Optional[DatasetStats]: \\n        if self.__statistics is not None: \\n            return self.__statistics \\n        def __callback(response: requests.Response) -> Optional[DatasetStats]: \\n            try: \\n                response_json = response.json() \\n                job_status = JobStatus(response_json["jobStatus"]) \\n                if "statistics" in response_json: \\n                    return DatasetStats.model_validate(response_json["statistics"]) \\n                else: \\n                    return None \\n            except (KeyError, ValidationError) as e: \\n                raise ClientError(f"Unable to parse response: {response.text}") \\n        _, stats = invoke( \\n            method="GET", \\n            url=f"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/statistics", \\n            valid_response_code=200, \\n            func=__callback \\n        ) \\n        self.__statistics = stats \\n        return self.__statistics \\n\\n    def data_quality(self) -> Optional[DataQuality]: \\n        if self.__data_metrics is not None: \\n            return self.__data_metrics \\n        if self.__model_type is not ModelType.BINARY: \\n            raise ClientError("Unable to parse data quality for non-binary models") \\n        def __callback(response: requests.Response) -> Optional[DataQuality]: \\n            try: \\n                response_json = response.json() \\n                job_status = JobStatus(response_json["jobStatus"]) \\n                if "dataQuality" in response_json: \\n                    return BinaryClassificationDataQuality.model_validate(response_json["dataQuality"]) \\n                else: \\n                    return None \\n            except (KeyError, ValidationError) as e: \\n                raise ClientError(f"Unable to parse response: {response.text}") \\n        _, metrics = invoke( \\n            method="GET", \\n            url=f"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/data-quality", \\n            valid_response_code=200, \\n            func=__callback \\n        ) \\n        self.__data_metrics = metrics \\n        return self.__data_metrics \\n\\n    def model_quality(self) -> Optional[ModelQuality]: \\n        if self.__model_metrics is not None: \\n            return self.__model_metrics \\n        if self.__model_type is not ModelType.BINARY: \\n            raise ClientError("Unable to parse model quality for non-binary models") \\n        def __callback(response: requests.Response) -> Optional[ModelQuality]: \\n            try: \\n                response_json = response.json() \\n                job_status = JobStatus(response_json["jobStatus"]) \\n                if "modelQuality" in response_json: \\n                    return BinaryClassificationModelQuality.model_validate(response_json["modelQuality"]) \\n                else: \\n                    return None \\n            except (KeyError, ValidationError) as e: \\n                raise ClientError(f"Unable to parse response: {response.text}") \\n        _, metrics = invoke( \\n            method="GET", \\n            url=f"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/model-quality", \\n            valid_response_code=200, \\n            func=__callback \\n        ) \\n        self.__model_metrics = metrics \\n        return self.__model_metrics \\n
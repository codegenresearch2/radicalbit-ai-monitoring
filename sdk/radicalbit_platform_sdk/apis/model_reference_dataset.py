from radicalbit_platform_sdk.commons import invoke\\\nfrom radicalbit_platform_sdk.models import (JobStatus, ReferenceFileUpload, DatasetStats, ModelQuality, DataQuality, ModelType, BinaryClassificationModelQuality, BinaryClassificationDataQuality)\\\nfrom radicalbit_platform_sdk.errors import ClientError\\\nfrom pydantic import ValidationError\\\nfrom typing import Optional\\\nimport requests\\\nfrom uuid import UUID\\\\\n\\nclass ModelReferenceDataset:\\\\\n    def __init__(self, base_url: str, model_uuid: UUID, model_type: ModelType, upload: ReferenceFileUpload) -> None:\\\\\n        self.__base_url = base_url\\\\\n        self.__model_uuid = model_uuid\\\\\n        self.__model_type = model_type\\\\\n        self.__uuid = upload.uuid\\\\\n        self.__path = upload.path\\\\\n        self.__date = upload.date\\\\\n        self.__status = upload.status\\\\\n        self.__statistics = None\\\\\n        self.__model_metrics = None\\\\\n        self.__data_metrics = None\\\\\n\\\\\n    def uuid(self) -> UUID:\\\\\n        return self.__uuid\\\\\n\\\\\n    def path(self) -> str:\\\\\n        return self.__path\\\\\n\\\\\n    def date(self) -> str:\\\\\n        return self.__date\\\\\n\\\\\n    def status(self) -> str:\\\\\n        return self.__status\\\\\n\\\\\n    def statistics(self) -> Optional[DatasetStats]:\\\\\n        """\\\\\n        Get statistics about the current dataset\\\\\n\\\\\n        :return: The `DatasetStats` if exists\\\\\n        """\\\\\n        if self.__statistics is not None:\\\\\n            return self.__statistics\\\\\n\\\\\n        def __callback(response: requests.Response) -> tuple[JobStatus, Optional[DatasetStats]]:\\\\\n            try:\\\\\n                response_json = response.json()\\\\\n                job_status = JobStatus(response_json["jobStatus"])\\\\\n                if "statistics" in response_json:\\\\\n                    return job_status, DatasetStats.model_validate(response_json["statistics"])\\\\\n                else:\\\\\n                    return job_status, None\\\\\n            except (KeyError, ValidationError) as _:\\\\\n                raise ClientError(f"Unable to parse response: {response.text}")\\\\\n\\\\\n        response = requests.get(f"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/statistics")\\\\\n        if response.status_code == 200:\\\\\n            status, stats = __callback(response)\\\\\n            self.__status = status\\\\\n            self.__statistics = stats\\\\\n            return stats\\\\\n        else:\\\\\n            raise ClientError(f"Unexpected status code: {response.status_code}")\\\\\n\\\\\n    def data_quality(self) -> Optional[DataQuality]:\\\\\n        """\\\\\n        Get data quality metrics about the current dataset\\\\\n\\\\\n        :return: The `DataQuality` if exists\\\\\n        """\\\\\n        if self.__data_metrics is not None:\\\\\n            return self.__data_metrics\\\\\n\\\\\n        def __callback(response: requests.Response) -> Optional[DataQuality]:\\\\\n            try:\\\\\n                response_json = response.json()\\\\\n                job_status = JobStatus(response_json["jobStatus"])\\\\\n                if "dataQuality" in response_json:\\\\\n                    if self.__model_type is ModelType.BINARY:\\\\\n                        return job_status, BinaryClassificationDataQuality.model_validate(response_json["dataQuality"])\\\\\n                    else:\\\\\n                        raise ClientError("Unable to parse get metrics for not binary models")\\\\\n                else:\\\\\n                    return job_status, None\\\\\n            except (KeyError, ValidationError) as _:\\\\\n                raise ClientError(f"Unable to parse response: {response.text}")\\\\\n\\\\\n        response = requests.get(f"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/data-quality")\\\\\n        if response.status_code == 200:\\\\\n            status, metrics = __callback(response)\\\\\n            self.__status = status\\\\\n            self.__data_metrics = metrics\\\\\n            return metrics\\\\\n        else:\\\\\n            raise ClientError(f"Unexpected status code: {response.status_code}")\\\\\n\\\\\n    def model_quality(self) -> Optional[ModelQuality]:\\\\\n        """\\\\\n        Get model quality metrics about the current dataset\\\\\n\\\\\n        :return: The `ModelQuality` if exists\\\\\n        """\\\\\n        if self.__model_metrics is not None:\\\\\n            return self.__model_metrics\\\\\n\\\\\n        def __callback(response: requests.Response) -> tuple[JobStatus, Optional[ModelQuality]]:\\\\\n            try:\\\\\n                response_json = response.json()\\\\\n                job_status = JobStatus(response_json["jobStatus"])\\\\\n                if "modelQuality" in response_json:\\\\\n                    if self.__model_type is ModelType.BINARY:\\\\\n                        return job_status, BinaryClassificationModelQuality.model_validate(response_json["modelQuality"])\\\\\n                    else:\\\\\n                        raise ClientError("Unable to parse get metrics for not binary models")\\\\\n                else:\\\\\n                    return job_status, None\\\\\n            except (KeyError, ValidationError) as _:\\\\\n                raise ClientError(f"Unable to parse response: {response.text}")\\\\\n\\\\\n        response = requests.get(f"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/model-quality")\\\\\n        if response.status_code == 200:\\\\\n            status, metrics = __callback(response)\\\\\n            self.__status = status\\\\\n            self.__model_metrics = metrics\\\\\n            return metrics\\\\\n        else:\\\\\n            raise ClientError(f"Unexpected status code: {response.status_code}")\\\\\n
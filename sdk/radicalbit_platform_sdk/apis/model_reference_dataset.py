from radicalbit_platform_sdk.commons import invoke\nfrom radicalbit_platform_sdk.models import (\n    JobStatus, \n    ReferenceFileUpload, \n    DatasetStats, \n    ModelQuality, \n    DataQuality, \n    ModelType, \n    BinaryClassificationModelQuality, \n    BinaryClassificationDataQuality \n)\nfrom radicalbit_platform_sdk.errors import ClientError \nfrom pydantic import ValidationError \nfrom typing import Optional \nimport requests \nfrom uuid import UUID \n\n\nclass ModelReferenceDataset: \n    def __init__(self, \n        base_url: str, \n        model_uuid: UUID, \n        model_type: ModelType, \n        upload: ReferenceFileUpload, \n        statistics: Optional[DatasetStats] = None, \n        model_metrics: Optional[ModelQuality] = None, \n        data_metrics: Optional[DataQuality] = None \n    ) -> None: \n        self.__base_url = base_url \n        self.__model_uuid = model_uuid \n        self.__model_type = model_type \n        self.__uuid = upload.uuid \n        self.__path = upload.path \n        self.__date = upload.date \n        self.__status = upload.status \n        self.__statistics = statistics \n        self.__model_metrics = model_metrics \n        self.__data_metrics = data_metrics \n\n    def uuid(self) -> UUID: \n        return self.__uuid \n\n    def path(self) -> str: \n        return self.__path \n\n    def date(self) -> str: \n        return self.__date \n\n    def status(self) -> str: \n        return self.__status \n\n    def statistics(self) -> Optional[DatasetStats]: \n        if self.__statistics is not None: \n            return self.__statistics \n        _, stats = invoke( \n            method=\"GET\", \n            url=f\\"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/statistics\\" \n            valid_response_code=200, \n            func=__callback \n        ) \n        self.__statistics = stats \n        return self.__statistics \n\n    def data_quality(self) -> Optional[DataQuality]: \n        if self.__data_metrics is not None: \n            return self.__data_metrics \n        _, metrics = invoke( \n            method=\"GET\", \n            url=f\\"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/data-quality\\" \n            valid_response_code=200, \n            func=__callback \n        ) \n        self.__data_metrics = metrics \n        return self.__data_metrics \n\n    def model_quality(self) -> Optional[ModelQuality]: \n        if self.__model_metrics is not None: \n            return self.__model_metrics \n        _, metrics = invoke( \n            method=\"GET\", \n            url=f\\"{self.__base_url}/api/models/{str(self.__model_uuid)}/reference/model-quality\\" \n            valid_response_code=200, \n            func=__callback \n        ) \n        self.__model_metrics = metrics \n        return self.__model_metrics \n
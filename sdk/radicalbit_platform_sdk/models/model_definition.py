from enum import Enum\\\nfrom typing import List, Optional\\\\nimport uuid as uuid_lib\\\\\nfrom pydantic import BaseModel, ConfigDict, Field\\\\\nfrom pydantic.alias_generators import to_camel\\\\\nfrom radicalbit_platform_sdk.models.column_definition import ColumnDefinition\\\\\nfrom radicalbit_platform_sdk.models.data_type import DataType\\\\\nfrom radicalbit_platform_sdk.models.model_type import ModelType\\\\\n\\\\\nclass OutputType(BaseModel):\\\\\n    prediction: ColumnDefinition\\\\\n    prediction_proba: Optional[ColumnDefinition] = None\\\\\n    output: List[ColumnDefinition]\\\\\n\\\\\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_camel)\\\\\n\\\\\nclass Granularity(str, Enum):\\\\\n    HOUR = 'HOUR'\\\\\n    DAY = 'DAY'\\\\\n    WEEK = 'WEEK'\\\\\n    MONTH = 'MONTH'\\\\\n\\\\\nclass BaseModelDefinition(BaseModel):\\\\\n    '''A base class for model definition.\\\n\\n    Attributes:\\\n        name: The name of the model.\\\n        description: An optional description to explain something about the model.\\\n        model_type: The type of the model\\\n        data_type: It explains the data type used by the model\\\n        granularity: The window used to calculate aggregated metrics\\\n        features: A list column representing the features set\\\n        outputs: An OutputType definition to explain the output of the model\\\n        target: The column used to represent model's target\\\n        timestamp: The column used to store when prediction was done\\\n        frameworks: An optional field to describe the frameworks used by the model\\\n        algorithm: An optional field to explain the algorithm used by the model\\n    '''\\n    name: str\\n    description: Optional[str] = None\\n    model_type: ModelType\\n    data_type: DataType\\n    granularity: Granularity\\n    features: List[ColumnDefinition]\\n    outputs: OutputType\\n    target: ColumnDefinition\\n    timestamp: ColumnDefinition\\n    frameworks: Optional[str] = None\\n    algorithm: Optional[str] = None\\n\\\\\n    model_config = ConfigDict(\\\\\n        populate_by_name=True, alias_generator=to_camel, protected_namespaces=()\\\\\n    )\\\\\n\\\\\nclass CreateModel(BaseModelDefinition):\\\\\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_camel)\\\\\n\\\\\nclass ModelDefinition(BaseModelDefinition):\\\\\n    uuid: uuid_lib.UUID = Field(default_factory=lambda: uuid_lib.uuid4())\\\\\n    created_at: str = Field(alias='createdAt')\\\\\n    updated_at: str = Field(alias='updatedAt')\\\\\n\\\\\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_camel)\\\\\n
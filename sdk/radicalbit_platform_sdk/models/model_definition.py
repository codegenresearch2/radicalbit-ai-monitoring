from enum import Enum\\\nfrom typing import List, Optional\\\nimport uuid as uuid_lib\\\n\\\nfrom pydantic import BaseModel, ConfigDict, Field\\\nfrom pydantic.alias_generators import to_camel\\\n\\\nfrom radicalbit_platform_sdk.models.column_definition import ColumnDefinition\\\nfrom radicalbit_platform_sdk.models.data_type import DataType\\\nfrom radicalbit_platform_sdk.models.model_type import ModelType\\\n\\\nclass OutputType(BaseModel):\\\n    prediction: ColumnDefinition\\\n    prediction_proba: Optional[ColumnDefinition] = None\\\n    output: List[ColumnDefinition]\\\n\\\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_camel)\\\n\\\nclass Granularity(str, Enum):\\\n    HOUR = 'HOUR'\\\n    DAY = 'DAY'\\\n    WEEK = 'WEEK'\\\n    MONTH = 'MONTH'\\\n\\\nclass BaseModelDefinition(BaseModel):\\\n    \"\"\"A base class for model definition.\"\"\"\\\n    name: str\\\n    description: Optional[str] = None\\\n    model_type: ModelType\\\n    data_type: DataType\\\n    granularity: Granularity\\\n    features: List[ColumnDefinition]\\\n    outputs: OutputType\\\n    target: ColumnDefinition\\\n    timestamp: ColumnDefinition\\\n    frameworks: Optional[str] = None\\\n    algorithm: Optional[str] = None\\\n\\\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_camel, protected_namespaces=())\\\n\\\nclass CreateModel(BaseModelDefinition):\\\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_camel)\\\n\\\nclass ModelDefinition(BaseModelDefinition):\\\n    uuid: uuid_lib.UUID = Field(default_factory=lambda: uuid_lib.uuid4())\\\n    created_at: str = Field(alias='createdAt')\\\n    updated_at: str = Field(alias='updatedAt')\\\n\\\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_camel)\\\n
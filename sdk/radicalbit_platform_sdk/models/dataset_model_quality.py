from pydantic import BaseModel, ConfigDict\nfrom pydantic.alias_generators import to_camel\nfrom typing import Optional\n\nclass ModelQuality(BaseModel):\n    pass\n\nclass BinaryClassificationModelQuality(ModelQuality):\n    f1: Optional[float] = None\n    accuracy: Optional[float] = None\n    precision: Optional[float] = None\n    recall: Optional[float] = None\n    f_measure: Optional[float] = None\n    weighted_precision: Optional[float] = None\n    weighted_recall: Optional[float] = None\n    weighted_f_measure: Optional[float] = None\n    weighted_true_positive_rate: Optional[float] = None\n    weighted_false_positive_rate: Optional[float] = None\n    true_positive_rate: Optional[float] = None\n    false_positive_rate: Optional[float] = None\n    true_positive_count: int\n    false_positive_count: int\n    true_negative_count: int\n    false_negative_count: int\n    area_under_roc: Optional[float] = None\n    area_under_pr: Optional[float] = None\n    model_config = ConfigDict(populate_by_name=True, alias_generator=to_camel, protected_namespaces=())\n\nclass MultiClassModelQuality(ModelQuality):\n    pass\n\nclass RegressionModelQuality(ModelQuality):\n    pass